package main

import (
	_ "embed"
	"fmt"
	"gopkg.in/yaml.v2"
	"regexp"
	"strconv"
	"strings"
)

type UAParser struct {
	Regex             string `yaml:"regex"`
	FamilyReplacement string `yaml:"family_replacement"`
	V1Replacement     string `yaml:"v1_replacement"`
	V2Replacement     string `yaml:"v2_replacement"`
	V3Replacement     string `yaml:"v3_replacement"`
}

//go:embed useragent_parser/uap-core/regexes.yaml
var ua_core_yaml []byte

//go:embed useragent_parser/regexes.yaml
var ua_ft_yaml []byte

func atoi(s string) int {
	v, _ := strconv.Atoi(s)
	return v
}

func useragent() error {
	type wrapper struct {
		UserAgentParsers []UAParser `yaml:"user_agent_parsers"`
	}

	var uaFT = wrapper{}
	var uaCore = wrapper{}

	err := yaml.Unmarshal(ua_ft_yaml, &uaFT)
	if err != nil {
		return err
	}

	err = yaml.Unmarshal(ua_core_yaml, &uaCore)
	if err != nil {
		return err
	}

	var uaRules []UAParser
	uaRules = append(uaFT.UserAgentParsers, uaCore.UserAgentParsers...)

	globals := &strings.Builder{}
	checks := &strings.Builder{}

	fmt.Fprintf(checks, `ua := Useragent{Family: "Other"}
if s == "" {`)
	for idx, rule := range uaRules {

		fmt.Fprintf(globals, "var ua_re%d = regexp.MustCompile(`%s`)\n", idx, rule.Regex)

		fmt.Fprintf(checks, "} else if match := ua_re%d.FindStringSubmatch(s); match != nil {\n", idx)
		re := regexp.MustCompile(rule.Regex)

		if rule.FamilyReplacement != "" {
			if strings.Contains(rule.FamilyReplacement, "$1") {
				fmt.Fprintf(checks, "	ua.Family = strings.Replace(`%s`, `$1`, match[1], 1)\n", rule.FamilyReplacement)
			} else {
				fmt.Fprintf(checks, "	ua.Family = `%s`\n", rule.FamilyReplacement)
			}
		} else {
			fmt.Fprintf(checks, "	ua.Family = match[1]\n")
		}

		subexp := re.NumSubexp()

		if rule.V1Replacement != "" {
			fmt.Fprintf(checks, "	ua.Major = %d\n", atoi(rule.V1Replacement))
		} else if subexp > 1 {
			fmt.Fprintf(checks, "	ua.Major, _ = strconv.Atoi(match[2])\n")
		}

		if rule.V2Replacement != "" {
			fmt.Fprintf(checks, "	ua.Minor = %d\n", atoi(rule.V2Replacement))
		} else if subexp > 2 {
			fmt.Fprintf(checks, "	ua.Minor, _ = strconv.Atoi(match[3])\n")
		}

		if rule.V3Replacement != "" {
			fmt.Fprintf(checks, "	ua.Patch = %d\n", atoi(rule.V3Replacement))
		} else if subexp > 3 {
			fmt.Fprintf(checks, "	ua.Patch, _ = strconv.Atoi(match[4])\n")
		}
	}
	fmt.Fprintf(checks, `}`)

	fmt.Printf(`// Code generated by "builder -useragent"; DO NOT EDIT.
package useragent

import (
"regexp"
"strconv"
"strings"
)
`)
	fmt.Printf(globals.String())
	fmt.Printf(`
// Parse parses a user-agent string, and returns a struct describing it
func Parse(s string) Useragent {
%s
	return ua
}`, checks)

	return nil
}
